services:
  postgresql_helpme:
    image: bitnami/postgresql:latest
    container_name: postgresql_helpme
    hostname: postgresql_helpme
    environment:
      POSTGRESQL_USERNAME: ${DB_USER}
      POSTGRESQL_PASSWORD: ${DB_PASSWORD}
      POSTGRESQL_DATABASE: ${DB_NAME}
      POSTGRESQL_TIMEZONE: America/Sao_Paulo
      TZ: America/Sao_Paulo
      POSTGRESQL_ENABLE_LDAP: "no"
      POSTGRESQL_ENABLE_TLS: "no"
      POSTGRESQL_PASSWORD_ENCRYPTION: scram-sha-256
      POSTGRESQL_SHARED_PRELOAD_LIBRARIES: pg_stat_statements
      POSTGRESQL_MAX_CONNECTIONS: ${DB_MAX_CONNECTIONS:-100}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgresql_data:/bitnami/postgresql
      - postgresql_backups:/backups
      - postgresql_archive:/bitnami/postgresql/archive
    networks:
      - helpme_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "PGPASSWORD=${DB_PASSWORD} pg_isready -U ${DB_USER} -d ${DB_NAME} && PGPASSWORD=${DB_PASSWORD} psql -U ${DB_USER} -d ${DB_NAME} -c 'SELECT 1' > /dev/null"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  mongodb_helpme:
    image: mongo:latest
    container_name: mongodb_helpme
    hostname: mongodb_helpme
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}
    healthcheck:
      test: |
        mongosh --quiet --username $${MONGO_INITDB_ROOT_USERNAME} \
          --password $${MONGO_INITDB_ROOT_PASSWORD} \
          --authenticationDatabase admin \
          --eval "db.adminCommand('ping')" > /dev/null
      interval: 10s
      timeout: 5s
      start_period: 20s
      retries: 5
    ports:
      - "${MONGO_PORT:-27017}:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - helpme_network
    restart: unless-stopped

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper_helpme
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - '2181:2181'
    networks:
      - helpme_network
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka_helpme
    depends_on:
      - zookeeper
    ports:
      - '9092:9092'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 9092 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 30
      start_period: 60s
    networks:
      - helpme_network
    restart: unless-stopped

  control-center:
    image: confluentinc/cp-enterprise-control-center:7.5.0
    container_name: control-center_helpme
    depends_on:
      kafka:
        condition: service_healthy
      zookeeper:
        condition: service_started
    ports:
      - '9021:9021'
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'localhost:9092'
      CONTROL_CENTER_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      PORT: 9021
    networks:
      - helpme_network
    restart: unless-stopped

  redis_helpme:
    image: redis:latest
    container_name: redis_helpme
    hostname: redis_helpme
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - helpme_network
    restart: unless-stopped

networks:
  helpme_network:
    driver: bridge
    name: helpme_network

volumes:
  postgresql_data:
    driver: local
    name: postgresql_helpme_data
  postgresql_backups:
    driver: local
    name: postgresql_helpme_backups
  postgresql_archive:
    driver: local
    name: postgresql_helpme_archive
  mongodb_data:
    driver: local
    name: mongodb_helpme_data
  redis_data:
    driver: local
    name: redis_helpme_data
